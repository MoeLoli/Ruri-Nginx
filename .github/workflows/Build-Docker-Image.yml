name: Build Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:        
      - name: CHECKOUT
        uses: actions/checkout@v2
      
      - name: SET UP QEMU
        uses: docker/setup-qemu-action@v1

      - name: SET UP DOCKER BUILDX
        uses: docker/setup-buildx-action@v1
      
      - name: LOGIN TO DOCKERHUB
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: GET NGINX VERSION (LATEST)
        id: get_nginx_latest_version
        run: |
          sudo apt install jq curl
          LATEST_VERSION=$(curl -s "https://cdn.jsdelivr.net/gh/SoraJin424/package-version@latest/nginx-release.json" | jq ".data[0].version" | sed "s/\"//g")
          
          echo "::set-output name=nginx_version::${LATEST_VERSION}"
            
      - name: GET NGINX VERSION (LOCAL)
        uses: actions/github-script@v3
        id: get_nginx_local_version
        with:
          github-token: ${{ github.token }}
          result-encoding: string
          script: |
            let HAVE_TAG = false;
            const tags = (await github.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags'
            })).data;
            for (let tag of tags) {
              if ((tag.ref).indexOf('${{ steps.get_nginx_latest_version.outputs.nginx_version }}') != -1) {
                HAVE_TAG = true;
              }
            }
            if (HAVE_TAG) {
              return '${{ steps.get_nginx_latest_version.outputs.nginx_version }}' ;
            }
            return '';
            
      - name: CREATE TAG
        uses: actions/github-script@v3
        if: steps.get_nginx_latest_version.outputs.nginx_version != '' && steps.get_nginx_local_version.outputs.result == ''
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.get_nginx_latest_version.outputs.nginx_version }}",
              sha: context.sha
            });
            
      - name: GET OPENSSL VERSION (LATEST)
        id: get_openssl_latest_version
        if: steps.get_nginx_latest_version.outputs.nginx_version != '' && steps.get_nginx_local_version.outputs.result == ''
        run: |
          sudo apt install jq curl
          LATEST_VERSION=$(curl -s "https://cdn.jsdelivr.net/gh/SoraJin424/package-version@latest/openssl-release.json" | jq ".data[0].version" | sed "s/\"//g")
          echo "::set-output name=openssl_version::${LATEST_VERSION}"
      
      - name: BUILD AND PUSH (NORMAL)
        uses: docker/build-push-action@v2
        if: steps.get_nginx_latest_version.outputs.nginx_version != '' && steps.get_nginx_local_version.outputs.result == '' && steps.get_openssl_latest_version.outputs.openssl_version != ''
        with:
          file: ./Dockerfile
          context: .
          build-args: |
            NGINX_VERSION=${{ steps.get_nginx_latest_version.outputs.nginx_version }}
            OPENSSL_VERSION=${{ steps.get_openssl_latest_version.outputs.openssl_version }}
          platforms: linux/arm64, linux/amd64
          push: true
          no-cache: true
          tags: |
            ${{ secrets.DOCKER_NS }}/ruri-nginx:${{ steps.get_nginx_latest_version.outputs.nginx_version }}
            ${{ secrets.DOCKER_NS }}/ruri-nginx:latest